/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.1.0.0 (NJsonSchema v9.13.28.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AuditLogClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 取得稽核紀錄報表
     * @param startTime (optional) 起始時間
     * @param endTime (optional) 結束時間
     */
    getAuditLogReport(startTime?: Date | undefined, endTime?: Date | undefined): Observable<ResultOfListOfAuditLogReport> {
        let url_ = this.baseUrl + "/api/v1.0/AuditLog?";
        if (startTime === null)
            throw new Error("The parameter 'startTime' cannot be null.");
        else if (startTime !== undefined)
            url_ += "startTime=" + encodeURIComponent(startTime ? "" + startTime.toJSON() : "") + "&";
        if (endTime === null)
            throw new Error("The parameter 'endTime' cannot be null.");
        else if (endTime !== undefined)
            url_ += "endTime=" + encodeURIComponent(endTime ? "" + endTime.toJSON() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAuditLogReport(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAuditLogReport(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfListOfAuditLogReport>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfListOfAuditLogReport>><any>_observableThrow(response_);
        }));
    }

    protected processGetAuditLogReport(response: HttpResponseBase): Observable<ResultOfListOfAuditLogReport> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfListOfAuditLogReport.fromJS(resultData200) : new ResultOfListOfAuditLogReport();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfListOfAuditLogReport>(<any>null);
    }
}

@Injectable()
export class FeatureClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 取得功能清單
     * @param condition 查詢條件
     */
    getFeatures(condition: FeatureQueryCondition): Observable<ResultOfPageResultOfFeatureQueryResult> {
        let url_ = this.baseUrl + "/api/v1.0/Feature/Filter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFeatures(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFeatures(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfPageResultOfFeatureQueryResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfPageResultOfFeatureQueryResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetFeatures(response: HttpResponseBase): Observable<ResultOfPageResultOfFeatureQueryResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfPageResultOfFeatureQueryResult.fromJS(resultData200) : new ResultOfPageResultOfFeatureQueryResult();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfPageResultOfFeatureQueryResult>(<any>null);
    }

    /**
     * 取得功能群組對應功能列表
     */
    getFeatureList(): Observable<ResultOfListOfRoleFeatureView> {
        let url_ = this.baseUrl + "/api/v1.0/Feature/List";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFeatureList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFeatureList(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfListOfRoleFeatureView>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfListOfRoleFeatureView>><any>_observableThrow(response_);
        }));
    }

    protected processGetFeatureList(response: HttpResponseBase): Observable<ResultOfListOfRoleFeatureView> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfListOfRoleFeatureView.fromJS(resultData200) : new ResultOfListOfRoleFeatureView();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfListOfRoleFeatureView>(<any>null);
    }

    /**
     * 取得單一功能資料
     * @param featureId feature Id
     */
    getFeatureById(featureId: number): Observable<ResultOfFeatureView> {
        let url_ = this.baseUrl + "/api/v1.0/Feature/{featureId}";
        if (featureId === undefined || featureId === null)
            throw new Error("The parameter 'featureId' must be defined.");
        url_ = url_.replace("{featureId}", encodeURIComponent("" + featureId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFeatureById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFeatureById(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfFeatureView>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfFeatureView>><any>_observableThrow(response_);
        }));
    }

    protected processGetFeatureById(response: HttpResponseBase): Observable<ResultOfFeatureView> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfFeatureView.fromJS(resultData200) : new ResultOfFeatureView();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfFeatureView>(<any>null);
    }

    /**
     * 刪除功能
     * @param featureId feature Id
     */
    deleteFeature(featureId: number): Observable<Result> {
        let url_ = this.baseUrl + "/api/v1.0/Feature/{featureId}";
        if (featureId === undefined || featureId === null)
            throw new Error("The parameter 'featureId' must be defined.");
        url_ = url_.replace("{featureId}", encodeURIComponent("" + featureId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFeature(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFeature(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteFeature(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Result.fromJS(resultData200) : new Result();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * 建立功能
     * @param model 功能資料
     */
    createFeature(model: FeatureCreate): Observable<Result> {
        let url_ = this.baseUrl + "/api/v1.0/Feature";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateFeature(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateFeature(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processCreateFeature(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Result.fromJS(resultData200) : new Result();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * 修改功能
     * @param model 功能資料
     */
    updateFeature(model: FeatureEdit): Observable<Result> {
        let url_ = this.baseUrl + "/api/v1.0/Feature";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateFeature(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateFeature(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateFeature(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Result.fromJS(resultData200) : new Result();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * 功能群組下拉選單
     */
    featureGroupList(): Observable<ResultOfListOfOptionOfInt32> {
        let url_ = this.baseUrl + "/api/v1.0/Feature/featureGroup";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFeatureGroupList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFeatureGroupList(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfListOfOptionOfInt32>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfListOfOptionOfInt32>><any>_observableThrow(response_);
        }));
    }

    protected processFeatureGroupList(response: HttpResponseBase): Observable<ResultOfListOfOptionOfInt32> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfListOfOptionOfInt32.fromJS(resultData200) : new ResultOfListOfOptionOfInt32();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfListOfOptionOfInt32>(<any>null);
    }

    /**
     * 功能群組下拉選單
     */
    featureOption(): Observable<ResultOfListOfOptionOfInt32> {
        let url_ = this.baseUrl + "/api/v1.0/Feature/FeatureOption";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFeatureOption(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFeatureOption(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfListOfOptionOfInt32>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfListOfOptionOfInt32>><any>_observableThrow(response_);
        }));
    }

    protected processFeatureOption(response: HttpResponseBase): Observable<ResultOfListOfOptionOfInt32> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfListOfOptionOfInt32.fromJS(resultData200) : new ResultOfListOfOptionOfInt32();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfListOfOptionOfInt32>(<any>null);
    }

    /**
     * 取得該角色可使用的功能代號
     */
    getFeatureCodesByRole(): Observable<ResultOfListOfString> {
        let url_ = this.baseUrl + "/api/v1.0/Feature/RoleFeature";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFeatureCodesByRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFeatureCodesByRole(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfListOfString>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfListOfString>><any>_observableThrow(response_);
        }));
    }

    protected processGetFeatureCodesByRole(response: HttpResponseBase): Observable<ResultOfListOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfListOfString.fromJS(resultData200) : new ResultOfListOfString();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfListOfString>(<any>null);
    }
}

@Injectable()
export class FeatureGroupClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 取得功能群組列表
     * @param condition 查詢條件
     */
    getFeatureGroups(condition: FeatureGroupQueryCondition): Observable<ResultOfPageResultOfFeatureGroupQueryResult> {
        let url_ = this.baseUrl + "/api/v1.0/FeatureGroup/Filter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFeatureGroups(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFeatureGroups(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfPageResultOfFeatureGroupQueryResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfPageResultOfFeatureGroupQueryResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetFeatureGroups(response: HttpResponseBase): Observable<ResultOfPageResultOfFeatureGroupQueryResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfPageResultOfFeatureGroupQueryResult.fromJS(resultData200) : new ResultOfPageResultOfFeatureGroupQueryResult();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfPageResultOfFeatureGroupQueryResult>(<any>null);
    }

    /**
     * 取得單一功能群組
     * @param featureGroupId featureGroup Id
     */
    getFeatureGroupById(featureGroupId: number): Observable<ResultOfFeatureGroupQueryResult> {
        let url_ = this.baseUrl + "/api/v1.0/FeatureGroup/{featureGroupId}";
        if (featureGroupId === undefined || featureGroupId === null)
            throw new Error("The parameter 'featureGroupId' must be defined.");
        url_ = url_.replace("{featureGroupId}", encodeURIComponent("" + featureGroupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetFeatureGroupById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetFeatureGroupById(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfFeatureGroupQueryResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfFeatureGroupQueryResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetFeatureGroupById(response: HttpResponseBase): Observable<ResultOfFeatureGroupQueryResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfFeatureGroupQueryResult.fromJS(resultData200) : new ResultOfFeatureGroupQueryResult();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfFeatureGroupQueryResult>(<any>null);
    }

    /**
     * 刪除功能群組
     * @param featureGroupId featureGroup Id
     */
    deleteFeatureGroup(featureGroupId: number): Observable<Result> {
        let url_ = this.baseUrl + "/api/v1.0/FeatureGroup/{featureGroupId}";
        if (featureGroupId === undefined || featureGroupId === null)
            throw new Error("The parameter 'featureGroupId' must be defined.");
        url_ = url_.replace("{featureGroupId}", encodeURIComponent("" + featureGroupId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteFeatureGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteFeatureGroup(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteFeatureGroup(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Result.fromJS(resultData200) : new Result();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * 建立功能群組
     * @param model 功能群組資料
     */
    createFeatureGroup(model: FeatureGroupCreate): Observable<Result> {
        let url_ = this.baseUrl + "/api/v1.0/FeatureGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateFeatureGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateFeatureGroup(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processCreateFeatureGroup(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Result.fromJS(resultData200) : new Result();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * 修改功能群組
     * @param model 功能群組資料
     */
    updateFeatureGroup(model: FeatureGroupEdit): Observable<Result> {
        let url_ = this.baseUrl + "/api/v1.0/FeatureGroup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateFeatureGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateFeatureGroup(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateFeatureGroup(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Result.fromJS(resultData200) : new Result();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }
}

@Injectable()
export class HealthCheckClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 確認主機健康狀態
     */
    isHealth(): Observable<string> {
        let url_ = this.baseUrl + "/api/v1.0/HealthCheck";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processIsHealth(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processIsHealth(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processIsHealth(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

@Injectable()
export class MenuClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 取得選單列表
     */
    getMenu(): Observable<ResultOfIEnumerableOfMenuItem> {
        let url_ = this.baseUrl + "/api/v1.0/Menu";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMenu(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMenu(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfIEnumerableOfMenuItem>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfIEnumerableOfMenuItem>><any>_observableThrow(response_);
        }));
    }

    protected processGetMenu(response: HttpResponseBase): Observable<ResultOfIEnumerableOfMenuItem> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfIEnumerableOfMenuItem.fromJS(resultData200) : new ResultOfIEnumerableOfMenuItem();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfIEnumerableOfMenuItem>(<any>null);
    }

    /**
     * 建立選單
     * @param model 選單資料
     */
    createMenu(model: MenuCreate): Observable<Result> {
        let url_ = this.baseUrl + "/api/v1.0/Menu";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateMenu(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateMenu(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processCreateMenu(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Result.fromJS(resultData200) : new Result();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * 更新選單
     * @param model 選單資料
     */
    updateMenu(model: MenuEdit): Observable<Result> {
        let url_ = this.baseUrl + "/api/v1.0/Menu";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateMenu(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateMenu(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateMenu(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Result.fromJS(resultData200) : new Result();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * 取得單筆選單
     * @param menuId Menu Id
     */
    getMenuById(menuId: number): Observable<ResultOfMenuEdit> {
        let url_ = this.baseUrl + "/api/v1.0/Menu/{menuId}";
        if (menuId === undefined || menuId === null)
            throw new Error("The parameter 'menuId' must be defined.");
        url_ = url_.replace("{menuId}", encodeURIComponent("" + menuId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMenuById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMenuById(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfMenuEdit>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfMenuEdit>><any>_observableThrow(response_);
        }));
    }

    protected processGetMenuById(response: HttpResponseBase): Observable<ResultOfMenuEdit> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfMenuEdit.fromJS(resultData200) : new ResultOfMenuEdit();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfMenuEdit>(<any>null);
    }

    /**
     * 刪除選單
     * @param menuId menu Id
     */
    deleteMenu(menuId: number): Observable<Result> {
        let url_ = this.baseUrl + "/api/v1.0/Menu/{menuId}";
        if (menuId === undefined || menuId === null)
            throw new Error("The parameter 'menuId' must be defined.");
        url_ = url_.replace("{menuId}", encodeURIComponent("" + menuId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteMenu(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteMenu(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteMenu(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Result.fromJS(resultData200) : new Result();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * 取得選單清單
     * @param condition 搜尋條件
     */
    getMenuList(condition: MenuQueryCondition): Observable<ResultOfPageResultOfMenuItem> {
        let url_ = this.baseUrl + "/api/v1.0/Menu/Filter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMenuList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMenuList(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfPageResultOfMenuItem>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfPageResultOfMenuItem>><any>_observableThrow(response_);
        }));
    }

    protected processGetMenuList(response: HttpResponseBase): Observable<ResultOfPageResultOfMenuItem> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfPageResultOfMenuItem.fromJS(resultData200) : new ResultOfPageResultOfMenuItem();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfPageResultOfMenuItem>(<any>null);
    }
}

@Injectable()
export class RoleClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 取得單一角色
     * @param roleId role Id
     */
    getRoleById(roleId: number): Observable<ResultOfRoleQueryResult> {
        let url_ = this.baseUrl + "/api/v1.0/Role/{roleId}";
        if (roleId === undefined || roleId === null)
            throw new Error("The parameter 'roleId' must be defined.");
        url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoleById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoleById(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfRoleQueryResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfRoleQueryResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoleById(response: HttpResponseBase): Observable<ResultOfRoleQueryResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfRoleQueryResult.fromJS(resultData200) : new ResultOfRoleQueryResult();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfRoleQueryResult>(<any>null);
    }

    /**
     * 刪除角色
     * @param roleId role Id
     */
    deleteRole(roleId: number): Observable<Result> {
        let url_ = this.baseUrl + "/api/v1.0/Role/{roleId}";
        if (roleId === undefined || roleId === null)
            throw new Error("The parameter 'roleId' must be defined.");
        url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteRole(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteRole(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Result.fromJS(resultData200) : new Result();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * 依照條件取得角色清單
     * @param condition 搜尋條件
     */
    getRoleList(condition: RoleQueryCondition): Observable<ResultOfPageResultOfRoleQueryResult> {
        let url_ = this.baseUrl + "/api/v1.0/Role/Filter";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoleList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoleList(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfPageResultOfRoleQueryResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfPageResultOfRoleQueryResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoleList(response: HttpResponseBase): Observable<ResultOfPageResultOfRoleQueryResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfPageResultOfRoleQueryResult.fromJS(resultData200) : new ResultOfPageResultOfRoleQueryResult();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfPageResultOfRoleQueryResult>(<any>null);
    }

    /**
     * 建立角色
     * @param model 角色資料
     */
    createRole(model: RoleCreate): Observable<Result> {
        let url_ = this.baseUrl + "/api/v1.0/Role";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateRole(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processCreateRole(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Result.fromJS(resultData200) : new Result();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * 更新角色
     * @param model 角色資料
     */
    updateRole(model: RoleEdit): Observable<Result> {
        let url_ = this.baseUrl + "/api/v1.0/Role";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateRole(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateRole(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateRole(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Result.fromJS(resultData200) : new Result();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }
}

@Injectable()
export class RoleFeatureClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 取得角色相關功能列表
     * @param condition 查詢條件
     */
    getRoleFeatureList(condition: RoleFeatureQueryCondition): Observable<ResultOfPageResultOfRoleFeatureQueryResult> {
        let url_ = this.baseUrl + "/api/v1.0/RoleFeature";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoleFeatureList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoleFeatureList(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfPageResultOfRoleFeatureQueryResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfPageResultOfRoleFeatureQueryResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoleFeatureList(response: HttpResponseBase): Observable<ResultOfPageResultOfRoleFeatureQueryResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfPageResultOfRoleFeatureQueryResult.fromJS(resultData200) : new ResultOfPageResultOfRoleFeatureQueryResult();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfPageResultOfRoleFeatureQueryResult>(<any>null);
    }

    /**
     * 修改角色功能對應
     * @param model 角色功能
     */
    updateRoleFeatureMapping(model: RoleFeatureEdit): Observable<Result> {
        let url_ = this.baseUrl + "/api/v1.0/RoleFeature";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("patch", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateRoleFeatureMapping(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateRoleFeatureMapping(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateRoleFeatureMapping(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Result.fromJS(resultData200) : new Result();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * 取得單一角色功能
     * @param roleId role Id
     */
    getRoleFeatureByRoleId(roleId: number): Observable<ResultOfRoleFeatureResult> {
        let url_ = this.baseUrl + "/api/v1.0/RoleFeature/{roleId}";
        if (roleId === undefined || roleId === null)
            throw new Error("The parameter 'roleId' must be defined.");
        url_ = url_.replace("{roleId}", encodeURIComponent("" + roleId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoleFeatureByRoleId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoleFeatureByRoleId(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfRoleFeatureResult>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfRoleFeatureResult>><any>_observableThrow(response_);
        }));
    }

    protected processGetRoleFeatureByRoleId(response: HttpResponseBase): Observable<ResultOfRoleFeatureResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfRoleFeatureResult.fromJS(resultData200) : new ResultOfRoleFeatureResult();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfRoleFeatureResult>(<any>null);
    }
}

@Injectable()
export class SsoEndPointClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 將 SSO 提供的短 Token 換取該站台的 JWT Token
     * @param token (optional) SSO 提供的 Token
     * @param userId (optional) SSO 提供的 使用者 Id
     */
    getJwtToken(token?: string | undefined, userId?: string | undefined): Observable<ResultOfString> {
        let url_ = this.baseUrl + "/api/v1.0/SsoEndPoint?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetJwtToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetJwtToken(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfString>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfString>><any>_observableThrow(response_);
        }));
    }

    protected processGetJwtToken(response: HttpResponseBase): Observable<ResultOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfString.fromJS(resultData200) : new ResultOfString();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfString>(<any>null);
    }
}

@Injectable()
export class TelegramClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    test01(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/v1.0/Telegram/KH-B-STS-0004";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTest01(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTest01(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processTest01(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    test02(): Observable<IResultOfFNSCIF0000Model> {
        let url_ = this.baseUrl + "/api/v1.0/Telegram/FNSCIF0000";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTest02(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTest02(<any>response_);
                } catch (e) {
                    return <Observable<IResultOfFNSCIF0000Model>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResultOfFNSCIF0000Model>><any>_observableThrow(response_);
        }));
    }

    protected processTest02(response: HttpResponseBase): Observable<IResultOfFNSCIF0000Model> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? IResultOfFNSCIF0000Model.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResultOfFNSCIF0000Model>(<any>null);
    }

    test03(): Observable<IResultOfFNSACT0001Model> {
        let url_ = this.baseUrl + "/api/v1.0/Telegram/FNSACT0001";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTest03(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTest03(<any>response_);
                } catch (e) {
                    return <Observable<IResultOfFNSACT0001Model>><any>_observableThrow(e);
                }
            } else
                return <Observable<IResultOfFNSACT0001Model>><any>_observableThrow(response_);
        }));
    }

    protected processTest03(response: HttpResponseBase): Observable<IResultOfFNSACT0001Model> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? IResultOfFNSACT0001Model.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<IResultOfFNSACT0001Model>(<any>null);
    }
}

@Injectable()
export class TestExceptionClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 情境一: 商業邏輯錯誤。只知道錯誤代碼，透過 ErrorCodeService 回傳 Result 物件
     * @param condition 查詢條件
     */
    store1(condition: FeatureQueryCondition): Observable<ResultOfFeatureQueryCondition> {
        let url_ = this.baseUrl + "/api/v1.0/TestException/Store1";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStore1(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStore1(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfFeatureQueryCondition>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfFeatureQueryCondition>><any>_observableThrow(response_);
        }));
    }

    protected processStore1(response: HttpResponseBase): Observable<ResultOfFeatureQueryCondition> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfFeatureQueryCondition.fromJS(resultData200) : new ResultOfFeatureQueryCondition();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfFeatureQueryCondition>(<any>null);
    }

    /**
     * 情境二: 商業邏輯錯誤。知道錯誤代碼＆訊息，回傳 Result 物件
     * @param condition 查詢條件
     */
    store2(condition: FeatureQueryCondition): Observable<Result> {
        let url_ = this.baseUrl + "/api/v1.0/TestException/Store2";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(condition);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStore2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStore2(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processStore2(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Result.fromJS(resultData200) : new Result();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * 例外情境三: AP人員自行預期例外，並且判定例外層級，錯誤訊息，回傳 NimbleExceptionAsync 物件交由 Middleware 處理
     * @param featureId 查詢條件
     */
    store3(featureId: number): Observable<ResultOfFeature> {
        let url_ = this.baseUrl + "/api/v1.0/TestException/Store3/{featureId}";
        if (featureId === undefined || featureId === null)
            throw new Error("The parameter 'featureId' must be defined.");
        url_ = url_.replace("{featureId}", encodeURIComponent("" + featureId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStore3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStore3(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfFeature>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfFeature>><any>_observableThrow(response_);
        }));
    }

    protected processStore3(response: HttpResponseBase): Observable<ResultOfFeature> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfFeature.fromJS(resultData200) : new ResultOfFeature();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfFeature>(<any>null);
    }

    /**
     * 情境四: AP人員沒預期任何例外，發生不預期的例外時，交由 Middleware 處理
     * @param featureId 查詢條件
     */
    store4(featureId: number): Observable<ResultOfFeature> {
        let url_ = this.baseUrl + "/api/v1.0/TestException/Store4/{featureId}";
        if (featureId === undefined || featureId === null)
            throw new Error("The parameter 'featureId' must be defined.");
        url_ = url_.replace("{featureId}", encodeURIComponent("" + featureId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStore4(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStore4(<any>response_);
                } catch (e) {
                    return <Observable<ResultOfFeature>><any>_observableThrow(e);
                }
            } else
                return <Observable<ResultOfFeature>><any>_observableThrow(response_);
        }));
    }

    protected processStore4(response: HttpResponseBase): Observable<ResultOfFeature> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ResultOfFeature.fromJS(resultData200) : new ResultOfFeature();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ResultOfFeature>(<any>null);
    }

    /**
     * 熔斷機制入口1
     */
    fusingMechanismAction1(): Observable<Result> {
        let url_ = this.baseUrl + "/api/v1.0/TestException/FusingMechanismAction1";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFusingMechanismAction1(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFusingMechanismAction1(<any>response_);
                } catch (e) {
                    return <Observable<Result>><any>_observableThrow(e);
                }
            } else
                return <Observable<Result>><any>_observableThrow(response_);
        }));
    }

    protected processFusingMechanismAction1(response: HttpResponseBase): Observable<Result> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? Result.fromJS(resultData200) : new Result();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Result>(<any>null);
    }

    /**
     * 熔斷機制入口2
     */
    fusingMechanismAction2(): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/v1.0/TestException/FusingMechanismAction2";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFusingMechanismAction2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFusingMechanismAction2(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processFusingMechanismAction2(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }
}

export class ResultOfListOfAuditLogReport implements IResultOfListOfAuditLogReport {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: AuditLogReport[];

    constructor(data?: IResultOfListOfAuditLogReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [] as any;
                for (let item of data["data"])
                    this.data!.push(AuditLogReport.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultOfListOfAuditLogReport {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfListOfAuditLogReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultOfListOfAuditLogReport {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: AuditLogReport[];
}

export class AuditLogReport implements IAuditLogReport {
    /** 方法名稱 */
    methodName!: string;
    /** 呼叫次數 */
    count!: number;

    constructor(data?: IAuditLogReport) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.methodName = data["methodName"];
            this.count = data["count"];
        }
    }

    static fromJS(data: any): AuditLogReport {
        data = typeof data === 'object' ? data : {};
        let result = new AuditLogReport();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["methodName"] = this.methodName;
        data["count"] = this.count;
        return data;
    }
}

export interface IAuditLogReport {
    /** 方法名稱 */
    methodName: string;
    /** 呼叫次數 */
    count: number;
}

export class ResultOfPageResultOfFeatureQueryResult implements IResultOfPageResultOfFeatureQueryResult {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: PageResultOfFeatureQueryResult;

    constructor(data?: IResultOfPageResultOfFeatureQueryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new PageResultOfFeatureQueryResult();
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            this.data = data["data"] ? PageResultOfFeatureQueryResult.fromJS(data["data"]) : new PageResultOfFeatureQueryResult();
        }
    }

    static fromJS(data: any): ResultOfPageResultOfFeatureQueryResult {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfPageResultOfFeatureQueryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IResultOfPageResultOfFeatureQueryResult {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: PageResultOfFeatureQueryResult;
}

export class PageInfo implements IPageInfo {
    pageSize!: number;
    pageNumber!: number;

    constructor(data?: IPageInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.pageSize = data["pageSize"];
            this.pageNumber = data["pageNumber"];
        }
    }

    static fromJS(data: any): PageInfo {
        data = typeof data === 'object' ? data : {};
        let result = new PageInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageSize"] = this.pageSize;
        data["pageNumber"] = this.pageNumber;
        return data;
    }
}

export interface IPageInfo {
    pageSize: number;
    pageNumber: number;
}

export class PageResultOfFeatureQueryResult extends PageInfo implements IPageResultOfFeatureQueryResult {
    totalPage!: number;
    totalCount!: number;
    items!: FeatureQueryResult[];

    constructor(data?: IPageResultOfFeatureQueryResult) {
        super(data);
        if (!data) {
            this.items = [];
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.totalPage = data["totalPage"];
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(FeatureQueryResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageResultOfFeatureQueryResult {
        data = typeof data === 'object' ? data : {};
        let result = new PageResultOfFeatureQueryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalPage"] = this.totalPage;
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPageResultOfFeatureQueryResult extends IPageInfo {
    totalPage: number;
    totalCount: number;
    items: FeatureQueryResult[];
}

export class FeatureQueryResult implements IFeatureQueryResult {
    /** 功能 ID */
    featureId!: number;
    /** 功能代碼 */
    featureCode!: string;
    /** 功能顯示文字 */
    featureText!: string;
    /** 功能群組名稱 */
    featureGroupName!: string;
    /** 啟用狀態 */
    isActive!: boolean;
    /** 排序 */
    sort!: number;

    constructor(data?: IFeatureQueryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.featureId = data["featureId"];
            this.featureCode = data["featureCode"];
            this.featureText = data["featureText"];
            this.featureGroupName = data["featureGroupName"];
            this.isActive = data["isActive"];
            this.sort = data["sort"];
        }
    }

    static fromJS(data: any): FeatureQueryResult {
        data = typeof data === 'object' ? data : {};
        let result = new FeatureQueryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["featureId"] = this.featureId;
        data["featureCode"] = this.featureCode;
        data["featureText"] = this.featureText;
        data["featureGroupName"] = this.featureGroupName;
        data["isActive"] = this.isActive;
        data["sort"] = this.sort;
        return data;
    }
}

export interface IFeatureQueryResult {
    /** 功能 ID */
    featureId: number;
    /** 功能代碼 */
    featureCode: string;
    /** 功能顯示文字 */
    featureText: string;
    /** 功能群組名稱 */
    featureGroupName: string;
    /** 啟用狀態 */
    isActive: boolean;
    /** 排序 */
    sort: number;
}

export class FeatureQueryCondition extends PageInfo implements IFeatureQueryCondition {
    /** 功能名稱 */
    featureName!: string;
    /** 排序資訊 */
    sortInfo!: SortInfo;

    constructor(data?: IFeatureQueryCondition) {
        super(data);
        if (!data) {
            this.sortInfo = new SortInfo();
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.featureName = data["featureName"];
            this.sortInfo = data["sortInfo"] ? SortInfo.fromJS(data["sortInfo"]) : new SortInfo();
        }
    }

    static fromJS(data: any): FeatureQueryCondition {
        data = typeof data === 'object' ? data : {};
        let result = new FeatureQueryCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["featureName"] = this.featureName;
        data["sortInfo"] = this.sortInfo ? this.sortInfo.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IFeatureQueryCondition extends IPageInfo {
    /** 功能名稱 */
    featureName: string;
    /** 排序資訊 */
    sortInfo: SortInfo;
}

export class SortInfo implements ISortInfo {
    sortBy!: string;
    sortColumn!: string;

    constructor(data?: ISortInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sortBy = data["sortBy"];
            this.sortColumn = data["sortColumn"];
        }
    }

    static fromJS(data: any): SortInfo {
        data = typeof data === 'object' ? data : {};
        let result = new SortInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sortBy"] = this.sortBy;
        data["sortColumn"] = this.sortColumn;
        return data;
    }
}

export interface ISortInfo {
    sortBy: string;
    sortColumn: string;
}

export class ResultOfListOfRoleFeatureView implements IResultOfListOfRoleFeatureView {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: RoleFeatureView[];

    constructor(data?: IResultOfListOfRoleFeatureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [] as any;
                for (let item of data["data"])
                    this.data!.push(RoleFeatureView.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultOfListOfRoleFeatureView {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfListOfRoleFeatureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultOfListOfRoleFeatureView {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: RoleFeatureView[];
}

export class RoleFeatureView implements IRoleFeatureView {
    /** 功能取組 ID */
    featureGroupId!: number;
    /** 功能群組名稱 */
    featureGroupName!: string;
    /** 功能列表 */
    feature!: OptionOfInt32[];

    constructor(data?: IRoleFeatureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.feature = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.featureGroupId = data["featureGroupId"];
            this.featureGroupName = data["featureGroupName"];
            if (data["feature"] && data["feature"].constructor === Array) {
                this.feature = [] as any;
                for (let item of data["feature"])
                    this.feature!.push(OptionOfInt32.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoleFeatureView {
        data = typeof data === 'object' ? data : {};
        let result = new RoleFeatureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["featureGroupId"] = this.featureGroupId;
        data["featureGroupName"] = this.featureGroupName;
        if (this.feature && this.feature.constructor === Array) {
            data["feature"] = [];
            for (let item of this.feature)
                data["feature"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRoleFeatureView {
    /** 功能取組 ID */
    featureGroupId: number;
    /** 功能群組名稱 */
    featureGroupName: string;
    /** 功能列表 */
    feature: OptionOfInt32[];
}

export class OptionOfInt32 implements IOptionOfInt32 {
    text!: string;
    id!: number;

    constructor(data?: IOptionOfInt32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.text = data["text"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OptionOfInt32 {
        data = typeof data === 'object' ? data : {};
        let result = new OptionOfInt32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["id"] = this.id;
        return data;
    }
}

export interface IOptionOfInt32 {
    text: string;
    id: number;
}

export class ResultOfFeatureView implements IResultOfFeatureView {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: FeatureView;

    constructor(data?: IResultOfFeatureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new FeatureView();
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            this.data = data["data"] ? FeatureView.fromJS(data["data"]) : new FeatureView();
        }
    }

    static fromJS(data: any): ResultOfFeatureView {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfFeatureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IResultOfFeatureView {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: FeatureView;
}

export class FeatureView implements IFeatureView {
    /** 功能 ID */
    featureId!: number;
    /** 功能代碼 */
    featureCode!: string;
    /** 功能名稱 */
    featureName!: string;
    /** 功能群組 ID */
    featureGroupId!: number;
    /** 啟用狀態 */
    isActive!: boolean;
    /** 是否允許指定角色使用 */
    isAllowAssignRoleUse!: boolean;
    /** 排序 */
    sort!: number;

    constructor(data?: IFeatureView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.featureId = data["featureId"];
            this.featureCode = data["featureCode"];
            this.featureName = data["featureName"];
            this.featureGroupId = data["featureGroupId"];
            this.isActive = data["isActive"];
            this.isAllowAssignRoleUse = data["isAllowAssignRoleUse"];
            this.sort = data["sort"];
        }
    }

    static fromJS(data: any): FeatureView {
        data = typeof data === 'object' ? data : {};
        let result = new FeatureView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["featureId"] = this.featureId;
        data["featureCode"] = this.featureCode;
        data["featureName"] = this.featureName;
        data["featureGroupId"] = this.featureGroupId;
        data["isActive"] = this.isActive;
        data["isAllowAssignRoleUse"] = this.isAllowAssignRoleUse;
        data["sort"] = this.sort;
        return data;
    }
}

export interface IFeatureView {
    /** 功能 ID */
    featureId: number;
    /** 功能代碼 */
    featureCode: string;
    /** 功能名稱 */
    featureName: string;
    /** 功能群組 ID */
    featureGroupId: number;
    /** 啟用狀態 */
    isActive: boolean;
    /** 是否允許指定角色使用 */
    isAllowAssignRoleUse: boolean;
    /** 排序 */
    sort: number;
}

export class ResultOfObject implements IResultOfObject {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: any;

    constructor(data?: IResultOfObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            this.data = data["data"];
        }
    }

    static fromJS(data: any): ResultOfObject {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        data["data"] = this.data;
        return data;
    }
}

export interface IResultOfObject {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: any;
}

export class Result extends ResultOfObject implements IResult {

    constructor(data?: IResult) {
        super(data);
    }

    init(data?: any) {
        super.init(data);
    }

    static fromJS(data: any): Result {
        data = typeof data === 'object' ? data : {};
        let result = new Result();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IResult extends IResultOfObject {
}

export class FeatureCreate implements IFeatureCreate {
    /** 功能代碼 */
    featureCode!: string;
    /** 功能名稱 */
    featureName!: string;
    /** 功能群組 ID */
    featureGroupId!: number;
    /** 啟用狀態 */
    isActive!: boolean;
    /** 是否允許指定角色使用 */
    isAllowAssignRoleUse!: boolean;
    /** 排序 */
    sort!: number;

    constructor(data?: IFeatureCreate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.featureCode = data["featureCode"];
            this.featureName = data["featureName"];
            this.featureGroupId = data["featureGroupId"];
            this.isActive = data["isActive"];
            this.isAllowAssignRoleUse = data["isAllowAssignRoleUse"];
            this.sort = data["sort"];
        }
    }

    static fromJS(data: any): FeatureCreate {
        data = typeof data === 'object' ? data : {};
        let result = new FeatureCreate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["featureCode"] = this.featureCode;
        data["featureName"] = this.featureName;
        data["featureGroupId"] = this.featureGroupId;
        data["isActive"] = this.isActive;
        data["isAllowAssignRoleUse"] = this.isAllowAssignRoleUse;
        data["sort"] = this.sort;
        return data;
    }
}

export interface IFeatureCreate {
    /** 功能代碼 */
    featureCode: string;
    /** 功能名稱 */
    featureName: string;
    /** 功能群組 ID */
    featureGroupId: number;
    /** 啟用狀態 */
    isActive: boolean;
    /** 是否允許指定角色使用 */
    isAllowAssignRoleUse: boolean;
    /** 排序 */
    sort: number;
}

export class FeatureEdit implements IFeatureEdit {
    /** 功能 ID */
    featureId!: number;
    /** 功能代碼 */
    featureCode!: string;
    /** 原功能名稱 */
    featureOldName!: string;
    /** 修改後功能名稱 */
    featureName!: string;
    /** 功能群組 ID */
    featureGroupId!: number;
    /** 啟用狀態 */
    isActive!: boolean;
    /** 是否允許指定角色使用 */
    isAllowAssignRoleUse!: boolean;
    /** 排序 */
    sort!: number;

    constructor(data?: IFeatureEdit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.featureId = data["featureId"];
            this.featureCode = data["featureCode"];
            this.featureOldName = data["featureOldName"];
            this.featureName = data["featureName"];
            this.featureGroupId = data["featureGroupId"];
            this.isActive = data["isActive"];
            this.isAllowAssignRoleUse = data["isAllowAssignRoleUse"];
            this.sort = data["sort"];
        }
    }

    static fromJS(data: any): FeatureEdit {
        data = typeof data === 'object' ? data : {};
        let result = new FeatureEdit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["featureId"] = this.featureId;
        data["featureCode"] = this.featureCode;
        data["featureOldName"] = this.featureOldName;
        data["featureName"] = this.featureName;
        data["featureGroupId"] = this.featureGroupId;
        data["isActive"] = this.isActive;
        data["isAllowAssignRoleUse"] = this.isAllowAssignRoleUse;
        data["sort"] = this.sort;
        return data;
    }
}

export interface IFeatureEdit {
    /** 功能 ID */
    featureId: number;
    /** 功能代碼 */
    featureCode: string;
    /** 原功能名稱 */
    featureOldName: string;
    /** 修改後功能名稱 */
    featureName: string;
    /** 功能群組 ID */
    featureGroupId: number;
    /** 啟用狀態 */
    isActive: boolean;
    /** 是否允許指定角色使用 */
    isAllowAssignRoleUse: boolean;
    /** 排序 */
    sort: number;
}

export class ResultOfListOfOptionOfInt32 implements IResultOfListOfOptionOfInt32 {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: OptionOfInt32[];

    constructor(data?: IResultOfListOfOptionOfInt32) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [] as any;
                for (let item of data["data"])
                    this.data!.push(OptionOfInt32.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultOfListOfOptionOfInt32 {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfListOfOptionOfInt32();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultOfListOfOptionOfInt32 {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: OptionOfInt32[];
}

export class ResultOfListOfString implements IResultOfListOfString {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: string[];

    constructor(data?: IResultOfListOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [] as any;
                for (let item of data["data"])
                    this.data!.push(item);
            }
        }
    }

    static fromJS(data: any): ResultOfListOfString {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfListOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item);
        }
        return data;
    }
}

export interface IResultOfListOfString {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: string[];
}

export class ResultOfPageResultOfFeatureGroupQueryResult implements IResultOfPageResultOfFeatureGroupQueryResult {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: PageResultOfFeatureGroupQueryResult;

    constructor(data?: IResultOfPageResultOfFeatureGroupQueryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new PageResultOfFeatureGroupQueryResult();
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            this.data = data["data"] ? PageResultOfFeatureGroupQueryResult.fromJS(data["data"]) : new PageResultOfFeatureGroupQueryResult();
        }
    }

    static fromJS(data: any): ResultOfPageResultOfFeatureGroupQueryResult {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfPageResultOfFeatureGroupQueryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IResultOfPageResultOfFeatureGroupQueryResult {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: PageResultOfFeatureGroupQueryResult;
}

export class PageResultOfFeatureGroupQueryResult extends PageInfo implements IPageResultOfFeatureGroupQueryResult {
    totalPage!: number;
    totalCount!: number;
    items!: FeatureGroupQueryResult[];

    constructor(data?: IPageResultOfFeatureGroupQueryResult) {
        super(data);
        if (!data) {
            this.items = [];
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.totalPage = data["totalPage"];
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(FeatureGroupQueryResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageResultOfFeatureGroupQueryResult {
        data = typeof data === 'object' ? data : {};
        let result = new PageResultOfFeatureGroupQueryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalPage"] = this.totalPage;
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPageResultOfFeatureGroupQueryResult extends IPageInfo {
    totalPage: number;
    totalCount: number;
    items: FeatureGroupQueryResult[];
}

export class FeatureGroupQueryResult implements IFeatureGroupQueryResult {
    /** 功能群組 ID */
    featureGroupId!: number;
    /** 啟用狀態 */
    isActive!: boolean;
    /** 排序 */
    sort!: number;
    /** 功能群組名稱 */
    featureGroupName!: string;

    constructor(data?: IFeatureGroupQueryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.featureGroupId = data["featureGroupId"];
            this.isActive = data["isActive"];
            this.sort = data["sort"];
            this.featureGroupName = data["featureGroupName"];
        }
    }

    static fromJS(data: any): FeatureGroupQueryResult {
        data = typeof data === 'object' ? data : {};
        let result = new FeatureGroupQueryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["featureGroupId"] = this.featureGroupId;
        data["isActive"] = this.isActive;
        data["sort"] = this.sort;
        data["featureGroupName"] = this.featureGroupName;
        return data;
    }
}

export interface IFeatureGroupQueryResult {
    /** 功能群組 ID */
    featureGroupId: number;
    /** 啟用狀態 */
    isActive: boolean;
    /** 排序 */
    sort: number;
    /** 功能群組名稱 */
    featureGroupName: string;
}

export class FeatureGroupQueryCondition extends PageInfo implements IFeatureGroupQueryCondition {
    /** FeatureGroupIdTest */
    featureGroupName!: string;
    /** 排序資訊 */
    sortInfo!: SortInfo;

    constructor(data?: IFeatureGroupQueryCondition) {
        super(data);
        if (!data) {
            this.sortInfo = new SortInfo();
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.featureGroupName = data["featureGroupName"];
            this.sortInfo = data["sortInfo"] ? SortInfo.fromJS(data["sortInfo"]) : new SortInfo();
        }
    }

    static fromJS(data: any): FeatureGroupQueryCondition {
        data = typeof data === 'object' ? data : {};
        let result = new FeatureGroupQueryCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["featureGroupName"] = this.featureGroupName;
        data["sortInfo"] = this.sortInfo ? this.sortInfo.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IFeatureGroupQueryCondition extends IPageInfo {
    /** FeatureGroupIdTest */
    featureGroupName: string;
    /** 排序資訊 */
    sortInfo: SortInfo;
}

export class ResultOfFeatureGroupQueryResult implements IResultOfFeatureGroupQueryResult {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: FeatureGroupQueryResult;

    constructor(data?: IResultOfFeatureGroupQueryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new FeatureGroupQueryResult();
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            this.data = data["data"] ? FeatureGroupQueryResult.fromJS(data["data"]) : new FeatureGroupQueryResult();
        }
    }

    static fromJS(data: any): ResultOfFeatureGroupQueryResult {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfFeatureGroupQueryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IResultOfFeatureGroupQueryResult {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: FeatureGroupQueryResult;
}

export class FeatureGroupCreate implements IFeatureGroupCreate {
    /** 功能群組名稱 */
    featureGroupName!: string;
    /** 啟用狀態 */
    isActive!: boolean;
    /** 排序 */
    sort!: number;

    constructor(data?: IFeatureGroupCreate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.featureGroupName = data["featureGroupName"];
            this.isActive = data["isActive"];
            this.sort = data["sort"];
        }
    }

    static fromJS(data: any): FeatureGroupCreate {
        data = typeof data === 'object' ? data : {};
        let result = new FeatureGroupCreate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["featureGroupName"] = this.featureGroupName;
        data["isActive"] = this.isActive;
        data["sort"] = this.sort;
        return data;
    }
}

export interface IFeatureGroupCreate {
    /** 功能群組名稱 */
    featureGroupName: string;
    /** 啟用狀態 */
    isActive: boolean;
    /** 排序 */
    sort: number;
}

export class FeatureGroupEdit implements IFeatureGroupEdit {
    /** 功能群組 ID */
    featureGroupId!: number;
    /** 啟用狀態 */
    isActive!: boolean;
    /** 排序 */
    sort!: number;
    /** 原功能群組名稱 */
    featureGroupOldName!: string;
    /** 修改後功能群組名稱 */
    featureGroupName!: string;

    constructor(data?: IFeatureGroupEdit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.featureGroupId = data["featureGroupId"];
            this.isActive = data["isActive"];
            this.sort = data["sort"];
            this.featureGroupOldName = data["featureGroupOldName"];
            this.featureGroupName = data["featureGroupName"];
        }
    }

    static fromJS(data: any): FeatureGroupEdit {
        data = typeof data === 'object' ? data : {};
        let result = new FeatureGroupEdit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["featureGroupId"] = this.featureGroupId;
        data["isActive"] = this.isActive;
        data["sort"] = this.sort;
        data["featureGroupOldName"] = this.featureGroupOldName;
        data["featureGroupName"] = this.featureGroupName;
        return data;
    }
}

export interface IFeatureGroupEdit {
    /** 功能群組 ID */
    featureGroupId: number;
    /** 啟用狀態 */
    isActive: boolean;
    /** 排序 */
    sort: number;
    /** 原功能群組名稱 */
    featureGroupOldName: string;
    /** 修改後功能群組名稱 */
    featureGroupName: string;
}

export class ResultOfIEnumerableOfMenuItem implements IResultOfIEnumerableOfMenuItem {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: MenuItem[];

    constructor(data?: IResultOfIEnumerableOfMenuItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            if (data["data"] && data["data"].constructor === Array) {
                this.data = [] as any;
                for (let item of data["data"])
                    this.data!.push(MenuItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ResultOfIEnumerableOfMenuItem {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfIEnumerableOfMenuItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        if (this.data && this.data.constructor === Array) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IResultOfIEnumerableOfMenuItem {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: MenuItem[];
}

/** 選單的 view model */
export class MenuItem implements IMenuItem {
    /** 選單 ID */
    menuId!: number;
    /** 選單顯示文字 */
    displayText!: string;
    /** 子選項 */
    subMenuList!: MenuItem[];
    /** 是否啟用 */
    enabled!: boolean;
    /** 排序 */
    sort?: number | undefined;
    /** 選單的連結 */
    linkUrl!: string;
    /** 選單的查詢代碼 */
    menuCode!: string;
    /** 功能代碼 */
    featureId?: number | undefined;
    /** 子選單數量 */
    childrenCount!: number;

    constructor(data?: IMenuItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.subMenuList = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.menuId = data["menuId"];
            this.displayText = data["displayText"];
            if (data["subMenuList"] && data["subMenuList"].constructor === Array) {
                this.subMenuList = [] as any;
                for (let item of data["subMenuList"])
                    this.subMenuList!.push(MenuItem.fromJS(item));
            }
            this.enabled = data["enabled"];
            this.sort = data["sort"];
            this.linkUrl = data["linkUrl"];
            this.menuCode = data["menuCode"];
            this.featureId = data["featureId"];
            this.childrenCount = data["childrenCount"];
        }
    }

    static fromJS(data: any): MenuItem {
        data = typeof data === 'object' ? data : {};
        let result = new MenuItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["menuId"] = this.menuId;
        data["displayText"] = this.displayText;
        if (this.subMenuList && this.subMenuList.constructor === Array) {
            data["subMenuList"] = [];
            for (let item of this.subMenuList)
                data["subMenuList"].push(item.toJSON());
        }
        data["enabled"] = this.enabled;
        data["sort"] = this.sort;
        data["linkUrl"] = this.linkUrl;
        data["menuCode"] = this.menuCode;
        data["featureId"] = this.featureId;
        data["childrenCount"] = this.childrenCount;
        return data;
    }
}

/** 選單的 view model */
export interface IMenuItem {
    /** 選單 ID */
    menuId: number;
    /** 選單顯示文字 */
    displayText: string;
    /** 子選項 */
    subMenuList: MenuItem[];
    /** 是否啟用 */
    enabled: boolean;
    /** 排序 */
    sort?: number | undefined;
    /** 選單的連結 */
    linkUrl: string;
    /** 選單的查詢代碼 */
    menuCode: string;
    /** 功能代碼 */
    featureId?: number | undefined;
    /** 子選單數量 */
    childrenCount: number;
}

export class ResultOfMenuEdit implements IResultOfMenuEdit {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: MenuEdit;

    constructor(data?: IResultOfMenuEdit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new MenuEdit();
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            this.data = data["data"] ? MenuEdit.fromJS(data["data"]) : new MenuEdit();
        }
    }

    static fromJS(data: any): ResultOfMenuEdit {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfMenuEdit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IResultOfMenuEdit {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: MenuEdit;
}

export class MenuEdit implements IMenuEdit {
    /** 選單 ID */
    menuId!: number;
    /** 父節點選單 ID */
    parentId?: number | undefined;
    /** 啟用狀態 */
    active!: boolean;
    /** 排序 */
    sort!: number;
    /** 連結 */
    linkUrl!: string;
    /** 選單名稱 */
    text!: string;
    /** 功能 ID */
    featureId?: number | undefined;
    /** 選單代碼 */
    menuCode!: string;

    constructor(data?: IMenuEdit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.menuId = data["menuId"];
            this.parentId = data["parentId"];
            this.active = data["active"];
            this.sort = data["sort"];
            this.linkUrl = data["linkUrl"];
            this.text = data["text"];
            this.featureId = data["featureId"];
            this.menuCode = data["menuCode"];
        }
    }

    static fromJS(data: any): MenuEdit {
        data = typeof data === 'object' ? data : {};
        let result = new MenuEdit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["menuId"] = this.menuId;
        data["parentId"] = this.parentId;
        data["active"] = this.active;
        data["sort"] = this.sort;
        data["linkUrl"] = this.linkUrl;
        data["text"] = this.text;
        data["featureId"] = this.featureId;
        data["menuCode"] = this.menuCode;
        return data;
    }
}

export interface IMenuEdit {
    /** 選單 ID */
    menuId: number;
    /** 父節點選單 ID */
    parentId?: number | undefined;
    /** 啟用狀態 */
    active: boolean;
    /** 排序 */
    sort: number;
    /** 連結 */
    linkUrl: string;
    /** 選單名稱 */
    text: string;
    /** 功能 ID */
    featureId?: number | undefined;
    /** 選單代碼 */
    menuCode: string;
}

export class MenuCreate implements IMenuCreate {
    /** 父節點選單 ID */
    parentId?: number | undefined;
    /** 啟用狀態 */
    active!: boolean;
    /** 排序 */
    sort!: number;
    /** 連結 */
    linkUrl!: string;
    /** 選單名稱 */
    text!: string;
    /** 功能 ID */
    featureId?: number | undefined;
    /** 選單代碼 */
    menuCode!: string;

    constructor(data?: IMenuCreate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentId = data["parentId"];
            this.active = data["active"];
            this.sort = data["sort"];
            this.linkUrl = data["linkUrl"];
            this.text = data["text"];
            this.featureId = data["featureId"];
            this.menuCode = data["menuCode"];
        }
    }

    static fromJS(data: any): MenuCreate {
        data = typeof data === 'object' ? data : {};
        let result = new MenuCreate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["active"] = this.active;
        data["sort"] = this.sort;
        data["linkUrl"] = this.linkUrl;
        data["text"] = this.text;
        data["featureId"] = this.featureId;
        data["menuCode"] = this.menuCode;
        return data;
    }
}

export interface IMenuCreate {
    /** 父節點選單 ID */
    parentId?: number | undefined;
    /** 啟用狀態 */
    active: boolean;
    /** 排序 */
    sort: number;
    /** 連結 */
    linkUrl: string;
    /** 選單名稱 */
    text: string;
    /** 功能 ID */
    featureId?: number | undefined;
    /** 選單代碼 */
    menuCode: string;
}

export class ResultOfPageResultOfMenuItem implements IResultOfPageResultOfMenuItem {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: PageResultOfMenuItem;

    constructor(data?: IResultOfPageResultOfMenuItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new PageResultOfMenuItem();
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            this.data = data["data"] ? PageResultOfMenuItem.fromJS(data["data"]) : new PageResultOfMenuItem();
        }
    }

    static fromJS(data: any): ResultOfPageResultOfMenuItem {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfPageResultOfMenuItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IResultOfPageResultOfMenuItem {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: PageResultOfMenuItem;
}

export class PageResultOfMenuItem extends PageInfo implements IPageResultOfMenuItem {
    totalPage!: number;
    totalCount!: number;
    items!: MenuItem[];

    constructor(data?: IPageResultOfMenuItem) {
        super(data);
        if (!data) {
            this.items = [];
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.totalPage = data["totalPage"];
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(MenuItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageResultOfMenuItem {
        data = typeof data === 'object' ? data : {};
        let result = new PageResultOfMenuItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalPage"] = this.totalPage;
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPageResultOfMenuItem extends IPageInfo {
    totalPage: number;
    totalCount: number;
    items: MenuItem[];
}

/** MenuQueryCondition */
export class MenuQueryCondition extends PageInfo implements IMenuQueryCondition {
    /** 父節點 ID */
    parentId!: number;
    /** 排序方式 */
    sortInfo!: SortInfo;

    constructor(data?: IMenuQueryCondition) {
        super(data);
        if (!data) {
            this.sortInfo = new SortInfo();
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.parentId = data["parentId"];
            this.sortInfo = data["sortInfo"] ? SortInfo.fromJS(data["sortInfo"]) : new SortInfo();
        }
    }

    static fromJS(data: any): MenuQueryCondition {
        data = typeof data === 'object' ? data : {};
        let result = new MenuQueryCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentId"] = this.parentId;
        data["sortInfo"] = this.sortInfo ? this.sortInfo.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

/** MenuQueryCondition */
export interface IMenuQueryCondition extends IPageInfo {
    /** 父節點 ID */
    parentId: number;
    /** 排序方式 */
    sortInfo: SortInfo;
}

export class ResultOfRoleQueryResult implements IResultOfRoleQueryResult {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: RoleQueryResult;

    constructor(data?: IResultOfRoleQueryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new RoleQueryResult();
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            this.data = data["data"] ? RoleQueryResult.fromJS(data["data"]) : new RoleQueryResult();
        }
    }

    static fromJS(data: any): ResultOfRoleQueryResult {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfRoleQueryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IResultOfRoleQueryResult {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: RoleQueryResult;
}

export class RoleQueryResult implements IRoleQueryResult {
    /** 角色 ID */
    roleId!: number;
    /** 角色代碼 */
    roleCode!: string;
    /** 原角色名稱 */
    roleName!: string;
    /** 啟用狀態 */
    isActive!: boolean;

    constructor(data?: IRoleQueryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"];
            this.roleCode = data["roleCode"];
            this.roleName = data["roleName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): RoleQueryResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoleQueryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleCode"] = this.roleCode;
        data["roleName"] = this.roleName;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IRoleQueryResult {
    /** 角色 ID */
    roleId: number;
    /** 角色代碼 */
    roleCode: string;
    /** 原角色名稱 */
    roleName: string;
    /** 啟用狀態 */
    isActive: boolean;
}

export class ResultOfPageResultOfRoleQueryResult implements IResultOfPageResultOfRoleQueryResult {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: PageResultOfRoleQueryResult;

    constructor(data?: IResultOfPageResultOfRoleQueryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new PageResultOfRoleQueryResult();
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            this.data = data["data"] ? PageResultOfRoleQueryResult.fromJS(data["data"]) : new PageResultOfRoleQueryResult();
        }
    }

    static fromJS(data: any): ResultOfPageResultOfRoleQueryResult {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfPageResultOfRoleQueryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IResultOfPageResultOfRoleQueryResult {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: PageResultOfRoleQueryResult;
}

export class PageResultOfRoleQueryResult extends PageInfo implements IPageResultOfRoleQueryResult {
    totalPage!: number;
    totalCount!: number;
    items!: RoleQueryResult[];

    constructor(data?: IPageResultOfRoleQueryResult) {
        super(data);
        if (!data) {
            this.items = [];
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.totalPage = data["totalPage"];
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(RoleQueryResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageResultOfRoleQueryResult {
        data = typeof data === 'object' ? data : {};
        let result = new PageResultOfRoleQueryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalPage"] = this.totalPage;
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPageResultOfRoleQueryResult extends IPageInfo {
    totalPage: number;
    totalCount: number;
    items: RoleQueryResult[];
}

export class RoleQueryCondition extends PageInfo implements IRoleQueryCondition {
    /** 角色名稱 */
    roleName!: string;
    /** 多組排序方式 */
    sortInfo!: SortInfo[];

    constructor(data?: IRoleQueryCondition) {
        super(data);
        if (!data) {
            this.sortInfo = [];
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.roleName = data["roleName"];
            if (data["sortInfo"] && data["sortInfo"].constructor === Array) {
                this.sortInfo = [] as any;
                for (let item of data["sortInfo"])
                    this.sortInfo!.push(SortInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoleQueryCondition {
        data = typeof data === 'object' ? data : {};
        let result = new RoleQueryCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleName"] = this.roleName;
        if (this.sortInfo && this.sortInfo.constructor === Array) {
            data["sortInfo"] = [];
            for (let item of this.sortInfo)
                data["sortInfo"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IRoleQueryCondition extends IPageInfo {
    /** 角色名稱 */
    roleName: string;
    /** 多組排序方式 */
    sortInfo: SortInfo[];
}

export class RoleCreate implements IRoleCreate {
    /** 角色代碼 */
    roleCode!: string;
    /** 角色名稱 */
    roleName!: string;
    /** 啟用狀態 */
    isActive!: boolean;

    constructor(data?: IRoleCreate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roleCode = data["roleCode"];
            this.roleName = data["roleName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): RoleCreate {
        data = typeof data === 'object' ? data : {};
        let result = new RoleCreate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleCode"] = this.roleCode;
        data["roleName"] = this.roleName;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IRoleCreate {
    /** 角色代碼 */
    roleCode: string;
    /** 角色名稱 */
    roleName: string;
    /** 啟用狀態 */
    isActive: boolean;
}

export class RoleEdit implements IRoleEdit {
    /** 角色 ID */
    roleId!: number;
    /** 原角色代碼 */
    roleOldCode!: string;
    /** 修改後的角色代碼 */
    roleCode!: string;
    /** 角色名稱 */
    roleName!: string;
    /** 啟用狀態 */
    isActive!: boolean;

    constructor(data?: IRoleEdit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"];
            this.roleOldCode = data["roleOldCode"];
            this.roleCode = data["roleCode"];
            this.roleName = data["roleName"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): RoleEdit {
        data = typeof data === 'object' ? data : {};
        let result = new RoleEdit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleOldCode"] = this.roleOldCode;
        data["roleCode"] = this.roleCode;
        data["roleName"] = this.roleName;
        data["isActive"] = this.isActive;
        return data;
    }
}

export interface IRoleEdit {
    /** 角色 ID */
    roleId: number;
    /** 原角色代碼 */
    roleOldCode: string;
    /** 修改後的角色代碼 */
    roleCode: string;
    /** 角色名稱 */
    roleName: string;
    /** 啟用狀態 */
    isActive: boolean;
}

export class ResultOfPageResultOfRoleFeatureQueryResult implements IResultOfPageResultOfRoleFeatureQueryResult {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: PageResultOfRoleFeatureQueryResult;

    constructor(data?: IResultOfPageResultOfRoleFeatureQueryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new PageResultOfRoleFeatureQueryResult();
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            this.data = data["data"] ? PageResultOfRoleFeatureQueryResult.fromJS(data["data"]) : new PageResultOfRoleFeatureQueryResult();
        }
    }

    static fromJS(data: any): ResultOfPageResultOfRoleFeatureQueryResult {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfPageResultOfRoleFeatureQueryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IResultOfPageResultOfRoleFeatureQueryResult {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: PageResultOfRoleFeatureQueryResult;
}

export class PageResultOfRoleFeatureQueryResult extends PageInfo implements IPageResultOfRoleFeatureQueryResult {
    totalPage!: number;
    totalCount!: number;
    items!: RoleFeatureQueryResult[];

    constructor(data?: IPageResultOfRoleFeatureQueryResult) {
        super(data);
        if (!data) {
            this.items = [];
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.totalPage = data["totalPage"];
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items!.push(RoleFeatureQueryResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PageResultOfRoleFeatureQueryResult {
        data = typeof data === 'object' ? data : {};
        let result = new PageResultOfRoleFeatureQueryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalPage"] = this.totalPage;
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPageResultOfRoleFeatureQueryResult extends IPageInfo {
    totalPage: number;
    totalCount: number;
    items: RoleFeatureQueryResult[];
}

export class RoleFeatureQueryResult implements IRoleFeatureQueryResult {
    /** 角色 Id */
    roleId!: number;
    /** 角色代碼 */
    roleCode!: string;
    /** 角色名稱 */
    roleName!: string;
    /** 角色功能名稱 */
    features!: string[];

    constructor(data?: IRoleFeatureQueryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.features = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"];
            this.roleCode = data["roleCode"];
            this.roleName = data["roleName"];
            if (data["features"] && data["features"].constructor === Array) {
                this.features = [] as any;
                for (let item of data["features"])
                    this.features!.push(item);
            }
        }
    }

    static fromJS(data: any): RoleFeatureQueryResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoleFeatureQueryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleCode"] = this.roleCode;
        data["roleName"] = this.roleName;
        if (this.features && this.features.constructor === Array) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item);
        }
        return data;
    }
}

export interface IRoleFeatureQueryResult {
    /** 角色 Id */
    roleId: number;
    /** 角色代碼 */
    roleCode: string;
    /** 角色名稱 */
    roleName: string;
    /** 角色功能名稱 */
    features: string[];
}

export class RoleFeatureQueryCondition extends PageInfo implements IRoleFeatureQueryCondition {
    /** 排序資訊 */
    sortInfo!: SortInfo;

    constructor(data?: IRoleFeatureQueryCondition) {
        super(data);
        if (!data) {
            this.sortInfo = new SortInfo();
        }
    }

    init(data?: any) {
        super.init(data);
        if (data) {
            this.sortInfo = data["sortInfo"] ? SortInfo.fromJS(data["sortInfo"]) : new SortInfo();
        }
    }

    static fromJS(data: any): RoleFeatureQueryCondition {
        data = typeof data === 'object' ? data : {};
        let result = new RoleFeatureQueryCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sortInfo"] = this.sortInfo ? this.sortInfo.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IRoleFeatureQueryCondition extends IPageInfo {
    /** 排序資訊 */
    sortInfo: SortInfo;
}

export class ResultOfRoleFeatureResult implements IResultOfRoleFeatureResult {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: RoleFeatureResult;

    constructor(data?: IResultOfRoleFeatureResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new RoleFeatureResult();
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            this.data = data["data"] ? RoleFeatureResult.fromJS(data["data"]) : new RoleFeatureResult();
        }
    }

    static fromJS(data: any): ResultOfRoleFeatureResult {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfRoleFeatureResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IResultOfRoleFeatureResult {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: RoleFeatureResult;
}

export class RoleFeatureResult implements IRoleFeatureResult {
    /** 角色 Id */
    roleId!: number;
    /** 角色代碼 */
    roleCode!: string;
    /** 角色名稱 */
    roleName!: string;
    /** 角色功能名稱 */
    featureIds!: number[];

    constructor(data?: IRoleFeatureResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.featureIds = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"];
            this.roleCode = data["roleCode"];
            this.roleName = data["roleName"];
            if (data["featureIds"] && data["featureIds"].constructor === Array) {
                this.featureIds = [] as any;
                for (let item of data["featureIds"])
                    this.featureIds!.push(item);
            }
        }
    }

    static fromJS(data: any): RoleFeatureResult {
        data = typeof data === 'object' ? data : {};
        let result = new RoleFeatureResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["roleCode"] = this.roleCode;
        data["roleName"] = this.roleName;
        if (this.featureIds && this.featureIds.constructor === Array) {
            data["featureIds"] = [];
            for (let item of this.featureIds)
                data["featureIds"].push(item);
        }
        return data;
    }
}

export interface IRoleFeatureResult {
    /** 角色 Id */
    roleId: number;
    /** 角色代碼 */
    roleCode: string;
    /** 角色名稱 */
    roleName: string;
    /** 角色功能名稱 */
    featureIds: number[];
}

/** RoleFeatureEdit */
export class RoleFeatureEdit implements IRoleFeatureEdit {
    /** RoleId */
    roleId!: number;
    /** FeatureIds */
    featureIds!: number[];

    constructor(data?: IRoleFeatureEdit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.featureIds = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"];
            if (data["featureIds"] && data["featureIds"].constructor === Array) {
                this.featureIds = [] as any;
                for (let item of data["featureIds"])
                    this.featureIds!.push(item);
            }
        }
    }

    static fromJS(data: any): RoleFeatureEdit {
        data = typeof data === 'object' ? data : {};
        let result = new RoleFeatureEdit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        if (this.featureIds && this.featureIds.constructor === Array) {
            data["featureIds"] = [];
            for (let item of this.featureIds)
                data["featureIds"].push(item);
        }
        return data;
    }
}

/** RoleFeatureEdit */
export interface IRoleFeatureEdit {
    /** RoleId */
    roleId: number;
    /** FeatureIds */
    featureIds: number[];
}

export class ResultOfString implements IResultOfString {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: string;

    constructor(data?: IResultOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            this.data = data["data"];
        }
    }

    static fromJS(data: any): ResultOfString {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        data["data"] = this.data;
        return data;
    }
}

export interface IResultOfString {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: string;
}

export abstract class IResultOfFNSCIF0000Model implements IIResultOfFNSCIF0000Model {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: FNSCIF0000Model;

    constructor(data?: IIResultOfFNSCIF0000Model) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new FNSCIF0000Model();
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            this.data = data["data"] ? FNSCIF0000Model.fromJS(data["data"]) : new FNSCIF0000Model();
        }
    }

    static fromJS(data: any): IResultOfFNSCIF0000Model {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IResultOfFNSCIF0000Model' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IIResultOfFNSCIF0000Model {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: FNSCIF0000Model;
}

export class FNSCIF0000Model implements IFNSCIF0000Model {
    hostJournalNo!: string;
    hostPostingDate!: string;
    hostTimestamp!: string;
    customerNumber!: string;
    customerType!: string;
    titleCode!: string;
    firstName!: string;
    surName!: string;
    englishAddress1!: string;
    englishAddress2!: string;
    address1!: string;
    address2!: string;
    jcicIndustryCode!: string;
    industryGroup!: string;
    industrySubGroup!: string;
    industryClass!: string;
    industryXX!: string;
    postCode!: string;
    countryCode!: string;
    phoneNo!: string;
    faxNumber!: string;
    businessPhone!: string;
    mobilePhoneNumber!: string;
    nationalityCode!: string;
    idNo!: string;
    idIssueDate!: string;
    idPlace!: string;
    idType!: string;
    domesticRisk!: string;
    crossBorderRisk!: string;
    vipCode!: string;
    restrictStatus!: string;
    homeBranchNo!: string;
    bankRelInd!: string;
    finRelInd!: string;
    txnRelInd!: string;
    posFInHold!: string;
    aoManager!: string;
    withholdTaxType!: string;
    statementFreq!: string;
    statementCycle!: string;
    statementDay!: string;
    createDate!: string;
    phoneResExt!: string;
    phoneBusExt!: string;
    wtcPostFlag!: string;
    custEntrySrc!: string;
    registeredPostCode!: string;
    registeredAddress1!: string;
    registeredAddress2!: string;
    registeredPhoneNo1!: string;
    registeredPhoneExt1!: string;
    emailAddress!: string;
    aoIdNo!: string;
    pdsLawAgreeDate!: string;
    pdsLawAgreeBranch!: string;
    custEntrySrcN!: string;
    maritalStatus!: string;
    expiryDate!: string;
    birthday!: string;
    customerName!: string;
    lastMaintainDt!: string;
    lastMaintainBr!: string;
    lastMaintainTeller!: string;
    corpCategory!: string;
    foreignOriginalId!: string;
    cbCode!: string;
    statementPostMethod!: string;
    suspectStatus!: string;
    sensitivityCategory!: string;
    occupancy!: string;
    personalCode!: string;
    businessCode!: string;
    agType1!: string;
    agCode1!: string;
    agLevel1!: string;
    agType2!: string;
    agCode2!: string;
    agLevel2!: string;
    assetSize!: string;
    guardType!: string;
    guardId!: string;
    guardType2!: string;
    guardId2!: string;

    constructor(data?: IFNSCIF0000Model) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.hostJournalNo = data["hostJournalNo"];
            this.hostPostingDate = data["hostPostingDate"];
            this.hostTimestamp = data["hostTimestamp"];
            this.customerNumber = data["customerNumber"];
            this.customerType = data["customerType"];
            this.titleCode = data["titleCode"];
            this.firstName = data["firstName"];
            this.surName = data["surName"];
            this.englishAddress1 = data["englishAddress1"];
            this.englishAddress2 = data["englishAddress2"];
            this.address1 = data["address1"];
            this.address2 = data["address2"];
            this.jcicIndustryCode = data["jcicIndustryCode"];
            this.industryGroup = data["industryGroup"];
            this.industrySubGroup = data["industrySubGroup"];
            this.industryClass = data["industryClass"];
            this.industryXX = data["industryXX"];
            this.postCode = data["postCode"];
            this.countryCode = data["countryCode"];
            this.phoneNo = data["phoneNo"];
            this.faxNumber = data["faxNumber"];
            this.businessPhone = data["businessPhone"];
            this.mobilePhoneNumber = data["mobilePhoneNumber"];
            this.nationalityCode = data["nationalityCode"];
            this.idNo = data["idNo"];
            this.idIssueDate = data["idIssueDate"];
            this.idPlace = data["idPlace"];
            this.idType = data["idType"];
            this.domesticRisk = data["domesticRisk"];
            this.crossBorderRisk = data["crossBorderRisk"];
            this.vipCode = data["vipCode"];
            this.restrictStatus = data["restrictStatus"];
            this.homeBranchNo = data["homeBranchNo"];
            this.bankRelInd = data["bankRelInd"];
            this.finRelInd = data["finRelInd"];
            this.txnRelInd = data["txnRelInd"];
            this.posFInHold = data["posFInHold"];
            this.aoManager = data["aoManager"];
            this.withholdTaxType = data["withholdTaxType"];
            this.statementFreq = data["statementFreq"];
            this.statementCycle = data["statementCycle"];
            this.statementDay = data["statementDay"];
            this.createDate = data["createDate"];
            this.phoneResExt = data["phoneResExt"];
            this.phoneBusExt = data["phoneBusExt"];
            this.wtcPostFlag = data["wtcPostFlag"];
            this.custEntrySrc = data["custEntrySrc"];
            this.registeredPostCode = data["registeredPostCode"];
            this.registeredAddress1 = data["registeredAddress1"];
            this.registeredAddress2 = data["registeredAddress2"];
            this.registeredPhoneNo1 = data["registeredPhoneNo1"];
            this.registeredPhoneExt1 = data["registeredPhoneExt1"];
            this.emailAddress = data["emailAddress"];
            this.aoIdNo = data["aoIdNo"];
            this.pdsLawAgreeDate = data["pdsLawAgreeDate"];
            this.pdsLawAgreeBranch = data["pdsLawAgreeBranch"];
            this.custEntrySrcN = data["custEntrySrcN"];
            this.maritalStatus = data["maritalStatus"];
            this.expiryDate = data["expiryDate"];
            this.birthday = data["birthday"];
            this.customerName = data["customerName"];
            this.lastMaintainDt = data["lastMaintainDt"];
            this.lastMaintainBr = data["lastMaintainBr"];
            this.lastMaintainTeller = data["lastMaintainTeller"];
            this.corpCategory = data["corpCategory"];
            this.foreignOriginalId = data["foreignOriginalId"];
            this.cbCode = data["cbCode"];
            this.statementPostMethod = data["statementPostMethod"];
            this.suspectStatus = data["suspectStatus"];
            this.sensitivityCategory = data["sensitivityCategory"];
            this.occupancy = data["occupancy"];
            this.personalCode = data["personalCode"];
            this.businessCode = data["businessCode"];
            this.agType1 = data["agType1"];
            this.agCode1 = data["agCode1"];
            this.agLevel1 = data["agLevel1"];
            this.agType2 = data["agType2"];
            this.agCode2 = data["agCode2"];
            this.agLevel2 = data["agLevel2"];
            this.assetSize = data["assetSize"];
            this.guardType = data["guardType"];
            this.guardId = data["guardId"];
            this.guardType2 = data["guardType2"];
            this.guardId2 = data["guardId2"];
        }
    }

    static fromJS(data: any): FNSCIF0000Model {
        data = typeof data === 'object' ? data : {};
        let result = new FNSCIF0000Model();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hostJournalNo"] = this.hostJournalNo;
        data["hostPostingDate"] = this.hostPostingDate;
        data["hostTimestamp"] = this.hostTimestamp;
        data["customerNumber"] = this.customerNumber;
        data["customerType"] = this.customerType;
        data["titleCode"] = this.titleCode;
        data["firstName"] = this.firstName;
        data["surName"] = this.surName;
        data["englishAddress1"] = this.englishAddress1;
        data["englishAddress2"] = this.englishAddress2;
        data["address1"] = this.address1;
        data["address2"] = this.address2;
        data["jcicIndustryCode"] = this.jcicIndustryCode;
        data["industryGroup"] = this.industryGroup;
        data["industrySubGroup"] = this.industrySubGroup;
        data["industryClass"] = this.industryClass;
        data["industryXX"] = this.industryXX;
        data["postCode"] = this.postCode;
        data["countryCode"] = this.countryCode;
        data["phoneNo"] = this.phoneNo;
        data["faxNumber"] = this.faxNumber;
        data["businessPhone"] = this.businessPhone;
        data["mobilePhoneNumber"] = this.mobilePhoneNumber;
        data["nationalityCode"] = this.nationalityCode;
        data["idNo"] = this.idNo;
        data["idIssueDate"] = this.idIssueDate;
        data["idPlace"] = this.idPlace;
        data["idType"] = this.idType;
        data["domesticRisk"] = this.domesticRisk;
        data["crossBorderRisk"] = this.crossBorderRisk;
        data["vipCode"] = this.vipCode;
        data["restrictStatus"] = this.restrictStatus;
        data["homeBranchNo"] = this.homeBranchNo;
        data["bankRelInd"] = this.bankRelInd;
        data["finRelInd"] = this.finRelInd;
        data["txnRelInd"] = this.txnRelInd;
        data["posFInHold"] = this.posFInHold;
        data["aoManager"] = this.aoManager;
        data["withholdTaxType"] = this.withholdTaxType;
        data["statementFreq"] = this.statementFreq;
        data["statementCycle"] = this.statementCycle;
        data["statementDay"] = this.statementDay;
        data["createDate"] = this.createDate;
        data["phoneResExt"] = this.phoneResExt;
        data["phoneBusExt"] = this.phoneBusExt;
        data["wtcPostFlag"] = this.wtcPostFlag;
        data["custEntrySrc"] = this.custEntrySrc;
        data["registeredPostCode"] = this.registeredPostCode;
        data["registeredAddress1"] = this.registeredAddress1;
        data["registeredAddress2"] = this.registeredAddress2;
        data["registeredPhoneNo1"] = this.registeredPhoneNo1;
        data["registeredPhoneExt1"] = this.registeredPhoneExt1;
        data["emailAddress"] = this.emailAddress;
        data["aoIdNo"] = this.aoIdNo;
        data["pdsLawAgreeDate"] = this.pdsLawAgreeDate;
        data["pdsLawAgreeBranch"] = this.pdsLawAgreeBranch;
        data["custEntrySrcN"] = this.custEntrySrcN;
        data["maritalStatus"] = this.maritalStatus;
        data["expiryDate"] = this.expiryDate;
        data["birthday"] = this.birthday;
        data["customerName"] = this.customerName;
        data["lastMaintainDt"] = this.lastMaintainDt;
        data["lastMaintainBr"] = this.lastMaintainBr;
        data["lastMaintainTeller"] = this.lastMaintainTeller;
        data["corpCategory"] = this.corpCategory;
        data["foreignOriginalId"] = this.foreignOriginalId;
        data["cbCode"] = this.cbCode;
        data["statementPostMethod"] = this.statementPostMethod;
        data["suspectStatus"] = this.suspectStatus;
        data["sensitivityCategory"] = this.sensitivityCategory;
        data["occupancy"] = this.occupancy;
        data["personalCode"] = this.personalCode;
        data["businessCode"] = this.businessCode;
        data["agType1"] = this.agType1;
        data["agCode1"] = this.agCode1;
        data["agLevel1"] = this.agLevel1;
        data["agType2"] = this.agType2;
        data["agCode2"] = this.agCode2;
        data["agLevel2"] = this.agLevel2;
        data["assetSize"] = this.assetSize;
        data["guardType"] = this.guardType;
        data["guardId"] = this.guardId;
        data["guardType2"] = this.guardType2;
        data["guardId2"] = this.guardId2;
        return data;
    }
}

export interface IFNSCIF0000Model {
    hostJournalNo: string;
    hostPostingDate: string;
    hostTimestamp: string;
    customerNumber: string;
    customerType: string;
    titleCode: string;
    firstName: string;
    surName: string;
    englishAddress1: string;
    englishAddress2: string;
    address1: string;
    address2: string;
    jcicIndustryCode: string;
    industryGroup: string;
    industrySubGroup: string;
    industryClass: string;
    industryXX: string;
    postCode: string;
    countryCode: string;
    phoneNo: string;
    faxNumber: string;
    businessPhone: string;
    mobilePhoneNumber: string;
    nationalityCode: string;
    idNo: string;
    idIssueDate: string;
    idPlace: string;
    idType: string;
    domesticRisk: string;
    crossBorderRisk: string;
    vipCode: string;
    restrictStatus: string;
    homeBranchNo: string;
    bankRelInd: string;
    finRelInd: string;
    txnRelInd: string;
    posFInHold: string;
    aoManager: string;
    withholdTaxType: string;
    statementFreq: string;
    statementCycle: string;
    statementDay: string;
    createDate: string;
    phoneResExt: string;
    phoneBusExt: string;
    wtcPostFlag: string;
    custEntrySrc: string;
    registeredPostCode: string;
    registeredAddress1: string;
    registeredAddress2: string;
    registeredPhoneNo1: string;
    registeredPhoneExt1: string;
    emailAddress: string;
    aoIdNo: string;
    pdsLawAgreeDate: string;
    pdsLawAgreeBranch: string;
    custEntrySrcN: string;
    maritalStatus: string;
    expiryDate: string;
    birthday: string;
    customerName: string;
    lastMaintainDt: string;
    lastMaintainBr: string;
    lastMaintainTeller: string;
    corpCategory: string;
    foreignOriginalId: string;
    cbCode: string;
    statementPostMethod: string;
    suspectStatus: string;
    sensitivityCategory: string;
    occupancy: string;
    personalCode: string;
    businessCode: string;
    agType1: string;
    agCode1: string;
    agLevel1: string;
    agType2: string;
    agCode2: string;
    agLevel2: string;
    assetSize: string;
    guardType: string;
    guardId: string;
    guardType2: string;
    guardId2: string;
}

export abstract class IResultOfFNSACT0001Model implements IIResultOfFNSACT0001Model {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: FNSACT0001Model;

    constructor(data?: IIResultOfFNSACT0001Model) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new FNSACT0001Model();
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            this.data = data["data"] ? FNSACT0001Model.fromJS(data["data"]) : new FNSACT0001Model();
        }
    }

    static fromJS(data: any): IResultOfFNSACT0001Model {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IResultOfFNSACT0001Model' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IIResultOfFNSACT0001Model {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: FNSACT0001Model;
}

export class FNSACT0001Model implements IFNSACT0001Model {
    hostJournalNo!: string;
    records!: Record[];

    constructor(data?: IFNSACT0001Model) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.records = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.hostJournalNo = data["hostJournalNo"];
            if (data["records"] && data["records"].constructor === Array) {
                this.records = [] as any;
                for (let item of data["records"])
                    this.records!.push(Record.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FNSACT0001Model {
        data = typeof data === 'object' ? data : {};
        let result = new FNSACT0001Model();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hostJournalNo"] = this.hostJournalNo;
        if (this.records && this.records.constructor === Array) {
            data["records"] = [];
            for (let item of this.records)
                data["records"].push(item.toJSON());
        }
        return data;
    }
}

export interface IFNSACT0001Model {
    hostJournalNo: string;
    records: Record[];
}

export class Record implements IRecord {
    bsBcode!: string;
    nominateAcctNo!: string;
    bankName!: string;
    status!: string;
    trfInOutFlag!: string;
    accountStatus!: string;
    tranBranch!: string;
    tellerNo!: string;
    spvNo!: string;
    applyDate!: string;
    applyChannel!: string;
    wsNo!: string;
    system!: string;
    sameIdFlag!: string;

    constructor(data?: IRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bsBcode = data["bsBcode"];
            this.nominateAcctNo = data["nominateAcctNo"];
            this.bankName = data["bankName"];
            this.status = data["status"];
            this.trfInOutFlag = data["trfInOutFlag"];
            this.accountStatus = data["accountStatus"];
            this.tranBranch = data["tranBranch"];
            this.tellerNo = data["tellerNo"];
            this.spvNo = data["spvNo"];
            this.applyDate = data["applyDate"];
            this.applyChannel = data["applyChannel"];
            this.wsNo = data["wsNo"];
            this.system = data["system"];
            this.sameIdFlag = data["sameIdFlag"];
        }
    }

    static fromJS(data: any): Record {
        data = typeof data === 'object' ? data : {};
        let result = new Record();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bsBcode"] = this.bsBcode;
        data["nominateAcctNo"] = this.nominateAcctNo;
        data["bankName"] = this.bankName;
        data["status"] = this.status;
        data["trfInOutFlag"] = this.trfInOutFlag;
        data["accountStatus"] = this.accountStatus;
        data["tranBranch"] = this.tranBranch;
        data["tellerNo"] = this.tellerNo;
        data["spvNo"] = this.spvNo;
        data["applyDate"] = this.applyDate;
        data["applyChannel"] = this.applyChannel;
        data["wsNo"] = this.wsNo;
        data["system"] = this.system;
        data["sameIdFlag"] = this.sameIdFlag;
        return data;
    }
}

export interface IRecord {
    bsBcode: string;
    nominateAcctNo: string;
    bankName: string;
    status: string;
    trfInOutFlag: string;
    accountStatus: string;
    tranBranch: string;
    tellerNo: string;
    spvNo: string;
    applyDate: string;
    applyChannel: string;
    wsNo: string;
    system: string;
    sameIdFlag: string;
}

export class ResultOfFeatureQueryCondition implements IResultOfFeatureQueryCondition {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: FeatureQueryCondition;

    constructor(data?: IResultOfFeatureQueryCondition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new FeatureQueryCondition();
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            this.data = data["data"] ? FeatureQueryCondition.fromJS(data["data"]) : new FeatureQueryCondition();
        }
    }

    static fromJS(data: any): ResultOfFeatureQueryCondition {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfFeatureQueryCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IResultOfFeatureQueryCondition {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: FeatureQueryCondition;
}

export class ResultOfFeature implements IResultOfFeature {
    isSuccess!: boolean;
    returnCode!: string;
    returnMessage!: string;
    data!: Feature;

    constructor(data?: IResultOfFeature) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.data = new Feature();
        }
    }

    init(data?: any) {
        if (data) {
            this.isSuccess = data["isSuccess"];
            this.returnCode = data["returnCode"];
            this.returnMessage = data["returnMessage"];
            this.data = data["data"] ? Feature.fromJS(data["data"]) : new Feature();
        }
    }

    static fromJS(data: any): ResultOfFeature {
        data = typeof data === 'object' ? data : {};
        let result = new ResultOfFeature();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["returnCode"] = this.returnCode;
        data["returnMessage"] = this.returnMessage;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IResultOfFeature {
    isSuccess: boolean;
    returnCode: string;
    returnMessage: string;
    data: Feature;
}

/** Feature */
export class Feature implements IFeature {
    featureId!: number;
    featureCode!: string;
    featureName!: string;
    featureGroupId!: number;
    isAllowAssignRoleUse!: boolean;
    isActive!: boolean;
    sort!: number;
    createOnUtc!: Date;
    createBy!: string;
    modifyOnUtc!: Date;
    modifyBy!: string;
    featureGroup!: FeatureGroup;
    menu!: Menu[];
    roleFeature!: RoleFeature[];

    constructor(data?: IFeature) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.featureGroup = new FeatureGroup();
            this.menu = [];
            this.roleFeature = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.featureId = data["featureId"];
            this.featureCode = data["featureCode"];
            this.featureName = data["featureName"];
            this.featureGroupId = data["featureGroupId"];
            this.isAllowAssignRoleUse = data["isAllowAssignRoleUse"];
            this.isActive = data["isActive"];
            this.sort = data["sort"];
            this.createOnUtc = data["createOnUtc"] ? new Date(data["createOnUtc"].toString()) : <any>undefined;
            this.createBy = data["createBy"];
            this.modifyOnUtc = data["modifyOnUtc"] ? new Date(data["modifyOnUtc"].toString()) : <any>undefined;
            this.modifyBy = data["modifyBy"];
            this.featureGroup = data["featureGroup"] ? FeatureGroup.fromJS(data["featureGroup"]) : new FeatureGroup();
            if (data["menu"] && data["menu"].constructor === Array) {
                this.menu = [] as any;
                for (let item of data["menu"])
                    this.menu!.push(Menu.fromJS(item));
            }
            if (data["roleFeature"] && data["roleFeature"].constructor === Array) {
                this.roleFeature = [] as any;
                for (let item of data["roleFeature"])
                    this.roleFeature!.push(RoleFeature.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Feature {
        data = typeof data === 'object' ? data : {};
        let result = new Feature();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["featureId"] = this.featureId;
        data["featureCode"] = this.featureCode;
        data["featureName"] = this.featureName;
        data["featureGroupId"] = this.featureGroupId;
        data["isAllowAssignRoleUse"] = this.isAllowAssignRoleUse;
        data["isActive"] = this.isActive;
        data["sort"] = this.sort;
        data["createOnUtc"] = this.createOnUtc ? this.createOnUtc.toISOString() : <any>undefined;
        data["createBy"] = this.createBy;
        data["modifyOnUtc"] = this.modifyOnUtc ? this.modifyOnUtc.toISOString() : <any>undefined;
        data["modifyBy"] = this.modifyBy;
        data["featureGroup"] = this.featureGroup ? this.featureGroup.toJSON() : <any>undefined;
        if (this.menu && this.menu.constructor === Array) {
            data["menu"] = [];
            for (let item of this.menu)
                data["menu"].push(item.toJSON());
        }
        if (this.roleFeature && this.roleFeature.constructor === Array) {
            data["roleFeature"] = [];
            for (let item of this.roleFeature)
                data["roleFeature"].push(item.toJSON());
        }
        return data;
    }
}

/** Feature */
export interface IFeature {
    featureId: number;
    featureCode: string;
    featureName: string;
    featureGroupId: number;
    isAllowAssignRoleUse: boolean;
    isActive: boolean;
    sort: number;
    createOnUtc: Date;
    createBy: string;
    modifyOnUtc: Date;
    modifyBy: string;
    featureGroup: FeatureGroup;
    menu: Menu[];
    roleFeature: RoleFeature[];
}

export class FeatureGroup implements IFeatureGroup {
    featureGroupId!: number;
    featureGroupName!: string;
    isActive!: boolean;
    sort!: number;
    createOnUtc!: Date;
    createBy!: string;
    modifyOnUtc!: Date;
    modifyBy!: string;
    feature!: Feature[];

    constructor(data?: IFeatureGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.feature = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.featureGroupId = data["featureGroupId"];
            this.featureGroupName = data["featureGroupName"];
            this.isActive = data["isActive"];
            this.sort = data["sort"];
            this.createOnUtc = data["createOnUtc"] ? new Date(data["createOnUtc"].toString()) : <any>undefined;
            this.createBy = data["createBy"];
            this.modifyOnUtc = data["modifyOnUtc"] ? new Date(data["modifyOnUtc"].toString()) : <any>undefined;
            this.modifyBy = data["modifyBy"];
            if (data["feature"] && data["feature"].constructor === Array) {
                this.feature = [] as any;
                for (let item of data["feature"])
                    this.feature!.push(Feature.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FeatureGroup {
        data = typeof data === 'object' ? data : {};
        let result = new FeatureGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["featureGroupId"] = this.featureGroupId;
        data["featureGroupName"] = this.featureGroupName;
        data["isActive"] = this.isActive;
        data["sort"] = this.sort;
        data["createOnUtc"] = this.createOnUtc ? this.createOnUtc.toISOString() : <any>undefined;
        data["createBy"] = this.createBy;
        data["modifyOnUtc"] = this.modifyOnUtc ? this.modifyOnUtc.toISOString() : <any>undefined;
        data["modifyBy"] = this.modifyBy;
        if (this.feature && this.feature.constructor === Array) {
            data["feature"] = [];
            for (let item of this.feature)
                data["feature"].push(item.toJSON());
        }
        return data;
    }
}

export interface IFeatureGroup {
    featureGroupId: number;
    featureGroupName: string;
    isActive: boolean;
    sort: number;
    createOnUtc: Date;
    createBy: string;
    modifyOnUtc: Date;
    modifyBy: string;
    feature: Feature[];
}

export class Menu implements IMenu {
    menuId!: number;
    menuCode!: string;
    featureId?: number | undefined;
    parentId?: number | undefined;
    isActive!: boolean;
    sort!: number;
    linkUrl!: string;
    createOnUtc!: Date;
    createBy!: string;
    modifyOnUtc!: Date;
    modifyBy!: string;
    feature!: Feature;
    parent!: Menu;
    inverseParent!: Menu[];
    menuTranslation!: MenuTranslation[];

    constructor(data?: IMenu) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.feature = new Feature();
            this.parent = new Menu();
            this.inverseParent = [];
            this.menuTranslation = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.menuId = data["menuId"];
            this.menuCode = data["menuCode"];
            this.featureId = data["featureId"];
            this.parentId = data["parentId"];
            this.isActive = data["isActive"];
            this.sort = data["sort"];
            this.linkUrl = data["linkUrl"];
            this.createOnUtc = data["createOnUtc"] ? new Date(data["createOnUtc"].toString()) : <any>undefined;
            this.createBy = data["createBy"];
            this.modifyOnUtc = data["modifyOnUtc"] ? new Date(data["modifyOnUtc"].toString()) : <any>undefined;
            this.modifyBy = data["modifyBy"];
            this.feature = data["feature"] ? Feature.fromJS(data["feature"]) : new Feature();
            this.parent = data["parent"] ? Menu.fromJS(data["parent"]) : new Menu();
            if (data["inverseParent"] && data["inverseParent"].constructor === Array) {
                this.inverseParent = [] as any;
                for (let item of data["inverseParent"])
                    this.inverseParent!.push(Menu.fromJS(item));
            }
            if (data["menuTranslation"] && data["menuTranslation"].constructor === Array) {
                this.menuTranslation = [] as any;
                for (let item of data["menuTranslation"])
                    this.menuTranslation!.push(MenuTranslation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Menu {
        data = typeof data === 'object' ? data : {};
        let result = new Menu();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["menuId"] = this.menuId;
        data["menuCode"] = this.menuCode;
        data["featureId"] = this.featureId;
        data["parentId"] = this.parentId;
        data["isActive"] = this.isActive;
        data["sort"] = this.sort;
        data["linkUrl"] = this.linkUrl;
        data["createOnUtc"] = this.createOnUtc ? this.createOnUtc.toISOString() : <any>undefined;
        data["createBy"] = this.createBy;
        data["modifyOnUtc"] = this.modifyOnUtc ? this.modifyOnUtc.toISOString() : <any>undefined;
        data["modifyBy"] = this.modifyBy;
        data["feature"] = this.feature ? this.feature.toJSON() : <any>undefined;
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        if (this.inverseParent && this.inverseParent.constructor === Array) {
            data["inverseParent"] = [];
            for (let item of this.inverseParent)
                data["inverseParent"].push(item.toJSON());
        }
        if (this.menuTranslation && this.menuTranslation.constructor === Array) {
            data["menuTranslation"] = [];
            for (let item of this.menuTranslation)
                data["menuTranslation"].push(item.toJSON());
        }
        return data;
    }
}

export interface IMenu {
    menuId: number;
    menuCode: string;
    featureId?: number | undefined;
    parentId?: number | undefined;
    isActive: boolean;
    sort: number;
    linkUrl: string;
    createOnUtc: Date;
    createBy: string;
    modifyOnUtc: Date;
    modifyBy: string;
    feature: Feature;
    parent: Menu;
    inverseParent: Menu[];
    menuTranslation: MenuTranslation[];
}

export class MenuTranslation implements IMenuTranslation {
    menuTranslationId!: number;
    menuId!: number;
    languageTypeId!: number;
    transformText!: string;
    createOnUtc!: Date;
    createBy!: string;
    modifyOnUtc!: Date;
    modifyBy!: string;
    languageType!: LanguageType;
    menu!: Menu;

    constructor(data?: IMenuTranslation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.languageType = new LanguageType();
            this.menu = new Menu();
        }
    }

    init(data?: any) {
        if (data) {
            this.menuTranslationId = data["menuTranslationId"];
            this.menuId = data["menuId"];
            this.languageTypeId = data["languageTypeId"];
            this.transformText = data["transformText"];
            this.createOnUtc = data["createOnUtc"] ? new Date(data["createOnUtc"].toString()) : <any>undefined;
            this.createBy = data["createBy"];
            this.modifyOnUtc = data["modifyOnUtc"] ? new Date(data["modifyOnUtc"].toString()) : <any>undefined;
            this.modifyBy = data["modifyBy"];
            this.languageType = data["languageType"] ? LanguageType.fromJS(data["languageType"]) : new LanguageType();
            this.menu = data["menu"] ? Menu.fromJS(data["menu"]) : new Menu();
        }
    }

    static fromJS(data: any): MenuTranslation {
        data = typeof data === 'object' ? data : {};
        let result = new MenuTranslation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["menuTranslationId"] = this.menuTranslationId;
        data["menuId"] = this.menuId;
        data["languageTypeId"] = this.languageTypeId;
        data["transformText"] = this.transformText;
        data["createOnUtc"] = this.createOnUtc ? this.createOnUtc.toISOString() : <any>undefined;
        data["createBy"] = this.createBy;
        data["modifyOnUtc"] = this.modifyOnUtc ? this.modifyOnUtc.toISOString() : <any>undefined;
        data["modifyBy"] = this.modifyBy;
        data["languageType"] = this.languageType ? this.languageType.toJSON() : <any>undefined;
        data["menu"] = this.menu ? this.menu.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMenuTranslation {
    menuTranslationId: number;
    menuId: number;
    languageTypeId: number;
    transformText: string;
    createOnUtc: Date;
    createBy: string;
    modifyOnUtc: Date;
    modifyBy: string;
    languageType: LanguageType;
    menu: Menu;
}

export class LanguageType implements ILanguageType {
    languageTypeId!: number;
    code!: string;
    languageTypeName!: string;
    createOnUtc!: Date;
    createBy!: string;
    modifyOnUtc!: Date;
    modifyBy!: string;
    menuTranslation!: MenuTranslation[];

    constructor(data?: ILanguageType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.menuTranslation = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.languageTypeId = data["languageTypeId"];
            this.code = data["code"];
            this.languageTypeName = data["languageTypeName"];
            this.createOnUtc = data["createOnUtc"] ? new Date(data["createOnUtc"].toString()) : <any>undefined;
            this.createBy = data["createBy"];
            this.modifyOnUtc = data["modifyOnUtc"] ? new Date(data["modifyOnUtc"].toString()) : <any>undefined;
            this.modifyBy = data["modifyBy"];
            if (data["menuTranslation"] && data["menuTranslation"].constructor === Array) {
                this.menuTranslation = [] as any;
                for (let item of data["menuTranslation"])
                    this.menuTranslation!.push(MenuTranslation.fromJS(item));
            }
        }
    }

    static fromJS(data: any): LanguageType {
        data = typeof data === 'object' ? data : {};
        let result = new LanguageType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["languageTypeId"] = this.languageTypeId;
        data["code"] = this.code;
        data["languageTypeName"] = this.languageTypeName;
        data["createOnUtc"] = this.createOnUtc ? this.createOnUtc.toISOString() : <any>undefined;
        data["createBy"] = this.createBy;
        data["modifyOnUtc"] = this.modifyOnUtc ? this.modifyOnUtc.toISOString() : <any>undefined;
        data["modifyBy"] = this.modifyBy;
        if (this.menuTranslation && this.menuTranslation.constructor === Array) {
            data["menuTranslation"] = [];
            for (let item of this.menuTranslation)
                data["menuTranslation"].push(item.toJSON());
        }
        return data;
    }
}

export interface ILanguageType {
    languageTypeId: number;
    code: string;
    languageTypeName: string;
    createOnUtc: Date;
    createBy: string;
    modifyOnUtc: Date;
    modifyBy: string;
    menuTranslation: MenuTranslation[];
}

export class RoleFeature implements IRoleFeature {
    roleFeatureId!: number;
    roleTypeId!: number;
    featureId!: number;
    createOnUtc!: Date;
    createBy!: string;
    modifyOnUtc!: Date;
    modifyBy!: string;
    feature!: Feature;
    roleType!: RoleType;

    constructor(data?: IRoleFeature) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.feature = new Feature();
            this.roleType = new RoleType();
        }
    }

    init(data?: any) {
        if (data) {
            this.roleFeatureId = data["roleFeatureId"];
            this.roleTypeId = data["roleTypeId"];
            this.featureId = data["featureId"];
            this.createOnUtc = data["createOnUtc"] ? new Date(data["createOnUtc"].toString()) : <any>undefined;
            this.createBy = data["createBy"];
            this.modifyOnUtc = data["modifyOnUtc"] ? new Date(data["modifyOnUtc"].toString()) : <any>undefined;
            this.modifyBy = data["modifyBy"];
            this.feature = data["feature"] ? Feature.fromJS(data["feature"]) : new Feature();
            this.roleType = data["roleType"] ? RoleType.fromJS(data["roleType"]) : new RoleType();
        }
    }

    static fromJS(data: any): RoleFeature {
        data = typeof data === 'object' ? data : {};
        let result = new RoleFeature();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleFeatureId"] = this.roleFeatureId;
        data["roleTypeId"] = this.roleTypeId;
        data["featureId"] = this.featureId;
        data["createOnUtc"] = this.createOnUtc ? this.createOnUtc.toISOString() : <any>undefined;
        data["createBy"] = this.createBy;
        data["modifyOnUtc"] = this.modifyOnUtc ? this.modifyOnUtc.toISOString() : <any>undefined;
        data["modifyBy"] = this.modifyBy;
        data["feature"] = this.feature ? this.feature.toJSON() : <any>undefined;
        data["roleType"] = this.roleType ? this.roleType.toJSON() : <any>undefined;
        return data;
    }
}

export interface IRoleFeature {
    roleFeatureId: number;
    roleTypeId: number;
    featureId: number;
    createOnUtc: Date;
    createBy: string;
    modifyOnUtc: Date;
    modifyBy: string;
    feature: Feature;
    roleType: RoleType;
}

export class RoleType implements IRoleType {
    roleTypeId!: number;
    roleTypeCode!: string;
    roleTypeName!: string;
    isActive!: boolean;
    createOnUtc!: Date;
    createBy!: string;
    modifyOnUtc!: Date;
    modifyBy!: string;
    roleFeature!: RoleFeature[];

    constructor(data?: IRoleType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.roleFeature = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.roleTypeId = data["roleTypeId"];
            this.roleTypeCode = data["roleTypeCode"];
            this.roleTypeName = data["roleTypeName"];
            this.isActive = data["isActive"];
            this.createOnUtc = data["createOnUtc"] ? new Date(data["createOnUtc"].toString()) : <any>undefined;
            this.createBy = data["createBy"];
            this.modifyOnUtc = data["modifyOnUtc"] ? new Date(data["modifyOnUtc"].toString()) : <any>undefined;
            this.modifyBy = data["modifyBy"];
            if (data["roleFeature"] && data["roleFeature"].constructor === Array) {
                this.roleFeature = [] as any;
                for (let item of data["roleFeature"])
                    this.roleFeature!.push(RoleFeature.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoleType {
        data = typeof data === 'object' ? data : {};
        let result = new RoleType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleTypeId"] = this.roleTypeId;
        data["roleTypeCode"] = this.roleTypeCode;
        data["roleTypeName"] = this.roleTypeName;
        data["isActive"] = this.isActive;
        data["createOnUtc"] = this.createOnUtc ? this.createOnUtc.toISOString() : <any>undefined;
        data["createBy"] = this.createBy;
        data["modifyOnUtc"] = this.modifyOnUtc ? this.modifyOnUtc.toISOString() : <any>undefined;
        data["modifyBy"] = this.modifyBy;
        if (this.roleFeature && this.roleFeature.constructor === Array) {
            data["roleFeature"] = [];
            for (let item of this.roleFeature)
                data["roleFeature"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRoleType {
    roleTypeId: number;
    roleTypeCode: string;
    roleTypeName: string;
    isActive: boolean;
    createOnUtc: Date;
    createBy: string;
    modifyOnUtc: Date;
    modifyBy: string;
    roleFeature: RoleFeature[];
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}
